<?xml version="1.0" encoding="UTF-8"?>
<Root>

<Entity>
<Name>Shared Preference</Name>

<Code>static SharedPreferences GlobalSharedPref;  // Always keep it static
GlobalSharedPref = this.getSharedPreferences("com.nxstudio.appname", MODE_PRIVATE);

// To add a value to Shared Preference
GlobalSharedPref.edit().putString("Name","Value").apply();

// To Get Value out of shared Preferences
GlobalSharedPref.getString("Name", "Default Value");</Code>
</Entity>



<Entity>
<Name>Get Source Code Of a Website</Name>
<Code>public static String GetSourceCodeOfWebsite(String URL_GET) {

    /*      String fetched_data stores all data fetched
    *      This method gets the source code of the Url passed through the urlget Parametre
    *      rd.read() becomes -1 when there is no chreecters remaining to be read
    *      StringBuilder(50000); thats the max charecters
    */

    String fetched_data = "";
    try {
    URL url = null;
    url = new URL(URL_GET);
    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    connection.connect();
    StringBuilder response = new StringBuilder(50000);
    InputStream inputStream = connection.getInputStream();
    BufferedReader rd = new BufferedReader(new InputStreamReader(inputStream));
    int i = 0;
    while ((i = rd.read()) > 0) {
    response.append((char) i);
    }
    fetched_data = response.toString();
    } catch (Exception e) {
    e.printStackTrace();
    }

    return fetched_data;
}</Code>
    
</Entity>




<Entity>
<Name>Regular Expressions (data between 2 expression)</Name>
    
<Code>public static ArrayList ArrayListRegex(String PatternBegginingEndAndRegex, String PatternSource) {

        /*  Sample usage regularExpression("<expression>(.*?)</expression>", source);
         *  Regex used ==> (.*?) ==> This creates an arraylist of all words matching between those charecters
         */

        ArrayList<String> ArraylistToAdd = new ArrayList<String>();

        Pattern p = Pattern.compile(PatternBegginingEndAndRegex);
        Matcher m = p.matcher(PatternSource);

        while (m.find()) {

            ArraylistToAdd.add(m.group(1));

        }
        return ArraylistToAdd;
}</Code>
</Entity>

</Root>
